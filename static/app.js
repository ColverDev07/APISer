// ==========================================
// CONFIGURACI√ìN Y VARIABLES GLOBALES
// ==========================================
let currentSlide = 0;
let autoplayInterval;
let currentQuestionIndex = 0;
let userAnswers = [];
let currentPlayer; // Spotify Player Instance
let currentDeviceId; // Spotify Web Playback SDK Device ID

// --- Pega tus variables 'fallbackImages', 'questions', 'inspirationalMessages' aqu√≠ ---
// Aseg√∫rate de que sean las mismas que usabas antes
const fallbackImages = [
    "https://images.pexels.com/photos/1528660/pexels-photo-1528660.jpeg",
    "https://images.pexels.com/photos/1054218/pexels-photo-1054218.jpeg",
    "https://images.pexels.com/photos/1684187/pexels-photo-1684187.jpeg",
    "https://images.pexels.com/photos/1118869/pexels-photo-1118869.jpeg",
    "https://images.pexels.com/photos/247819/pexels-photo-247819.jpeg",
    "https://images.pexels.com/photos/733853/pexels-photo-733853.jpeg",
    "https://images.pexels.com/photos/4348403/pexels-photo-4348403.jpeg",
    "https://images.pexels.com/photos/3184418/pexels-photo-3184418.jpeg"
];

const questions = [
    { id: 1, category: "üéì MI FUTURO", question: "¬øQu√© carrera o profesi√≥n te ves ejerciendo en el futuro? ¬øQu√© tipo de vida quieres tener?", helper: "No importa si a√∫n no est√°s 100% seguro. Escribe lo que te emociona imaginar.", sceneTitle: "Mi Visi√≥n de Futuro", imageUrls: ["https://images.pexels.com/photos/1287145/pexels-photo-1287145.jpeg", "https://images.pexels.com/photos/210243/pexels-photo-210243.jpeg", "https://images.pexels.com/photos/935756/pexels-photo-935756.jpeg", "https://images.pexels.com/photos/3184338/pexels-photo-3184338.jpeg", "https://images.pexels.com/photos/1438081/pexels-photo-1438081.jpeg"] },
    { id: 2, category: "üéØ METAS ACAD√âMICAS", question: "¬øQu√© quieres lograr este a√±o en tus estudios?", helper: "S√© espec√≠fico. ¬øQu√© nota quieres? ¬øQu√© materias son prioridad?", sceneTitle: "Mis Metas Acad√©micas", imageUrls: ["https://images.pexels.com/photos/4145190/pexels-photo-4145190.jpeg", "https://images.pexels.com/photos/267507/pexels-photo-267507.jpeg", "https://images.pexels.com/photos/5905709/pexels-photo-5905709.jpeg", "https://images.pexels.com/photos/256490/pexels-photo-256490.jpeg", "https://images.pexels.com/photos/207692/pexels-photo-207692.jpeg"] },
    { id: 3, category: "üí™ MIS FORTALEZAS", question: "¬øEn qu√© materias o actividades eres bueno? ¬øQu√© habilidades tienes?", helper: "Piensa en lo que te sale f√°cil o lo que otros reconocen en ti.", sceneTitle: "Mis Superpoderes", imageUrls: ["https://images.pexels.com/photos/914929/pexels-photo-914929.jpeg", "https://images.pexels.com/photos/1684187/pexels-photo-1684187.jpeg", "https://images.pexels.com/photos/3768131/pexels-photo-3768131.jpeg", "https://images.pexels.com/photos/2379005/pexels-photo-2379005.jpeg", "https://images.pexels.com/photos/3775120/pexels-photo-3775120.jpeg"] },
    { id: 4, category: "üöß MIS OBST√ÅCULOS", question: "¬øQu√© te impide estudiar mejor o alcanzar tus metas?", helper: "S√© honesto. Reconocer el problema es el primer paso para solucionarlo.", sceneTitle: "Mis Desaf√≠os", imageUrls: ["https://images.pexels.com/photos/1194345/pexels-photo-1194345.jpeg", "https://images.pexels.com/photos/1118869/pexels-photo-1118869.jpeg", "https://images.pexels.com/photos/289586/pexels-photo-289586.jpeg", "https://images.pexels.com/photos/1562058/pexels-photo-1562058.jpeg", "https://images.pexels.com/photos/4034525/pexels-photo-4034525.jpeg"] },
    { id: 5, category: "üìâ √ÅREAS A MEJORAR", question: "¬øQu√© materias o h√°bitos necesitas mejorar?", helper: "Todos tenemos debilidades. Identifica las tuyas para trabajar en ellas.", sceneTitle: "Mi Crecimiento", imageUrls: ["https://images.pexels.com/photos/323951/pexels-photo-323951.jpeg", "https://images.pexels.com/photos/247819/pexels-photo-247819.jpeg", "https://images.pexels.com/photos/1206101/pexels-photo-1206101.jpeg", "https://images.pexels.com/photos/5302820/pexels-photo-5302820.jpeg", "https://images.pexels.com/photos/669584/pexels-photo-669584.jpeg"] },
    { id: 6, category: "üî• MI MOTIVACI√ìN", question: "¬øPor qu√© es importante para ti tener √©xito en tus estudios?", helper: "Puede ser hacer sentir orgullosos a tus padres, conseguir una beca, etc.", sceneTitle: "Mi Motor Interior", imageUrls: ["https://images.pexels.com/photos/1054218/pexels-photo-1054218.jpeg", "https://images.pexels.com/photos/1528660/pexels-photo-1528660.jpeg", "https://images.pexels.com/photos/291528/pexels-photo-291528.jpeg", "https://images.pexels.com/photos/1239162/pexels-photo-1239162.jpeg", "https://images.pexels.com/photos/733853/pexels-photo-733853.jpeg"] },
    { id: 7, category: "üõ§Ô∏è MI PLAN", question: "¬øQu√© 3 acciones concretas har√°s esta semana para acercarte a tus metas?", helper: "Ej: Estudiar 1 hora diaria, hacer un horario, pedir ayuda.", sceneTitle: "Mis Pr√≥ximos Pasos", imageUrls: ["https://images.pexels.com/photos/1996333/pexels-photo-1996333.jpeg", "https://images.pexels.com/photos/4348403/pexels-photo-4348403.jpeg", "https://images.pexels.com/photos/8938927/pexels-photo-8938927.jpeg", "https://images.pexels.com/photos/1015568/pexels-photo-1015568.jpeg", "https://images.pexels.com/photos/380769/pexels-photo-380769.jpeg"] },
    { id: 8, category: "üåü MIS RECURSOS", question: "¬øQu√© apoyo tienes? (Profesores, familia, amigos, etc.)", helper: "Identifica tus recursos. No est√°s solo en este viaje.", sceneTitle: "Mi Red de Apoyo", imageUrls: ["https://images.pexels.com/photos/5076516/pexels-photo-5076516.jpeg", "https://images.pexels.com/photos/3184418/pexels-photo-3184418.jpeg", "https://images.pexels.com/photos/1181406/pexels-photo-1181406.jpeg", "https://images.pexels.com/photos/3183150/pexels-photo-3183150.jpeg", "https://images.pexels.com/photos/1595385/pexels-photo-1595385.jpeg"] }
];

const inspirationalMessages = [
    "Visualiza tu √©xito, el primer paso.",
    "Cada meta cumplida te acerca m√°s.",
    "Tus dones son tus herramientas.",
    "Los obst√°culos son solo desv√≠os.",
    "Crece fuera de tu zona de confort.",
    "Tu 'por qu√©' es tu motor.",
    "Peque√±as acciones, grandes futuros.",
    "Nunca est√°s solo en el camino."
];
// ---------------------------------------------------------------------------------


// ==========================================
// INICIALIZACI√ìN DE LA APP
// ==========================================
// Se ejecuta cuando el HTML est√° completamente cargado
document.addEventListener('DOMContentLoaded', initializeApp);

async function initializeApp() {
    console.log("DOM Cargado. Inicializando la aplicaci√≥n...");
    
    // 1. Configurar Listeners del Buscador de Spotify
    // Es importante hacerlo aqu√≠ para que los elementos existan
    setupSpotifySearchListeners(); 
    
    // 2. Intentar inicializar Spotify (esto carga el SDK si es necesario)
    // Usamos 'await' para asegurarnos de que termine antes de decidir qu√© pantalla mostrar
    await initializeSpotifyConnection(); 

    // 3. Comprobar si ya estamos logueados (usando la variable global de Flask)
    if (window.isSpotifyLoggedIn === true) {
        // Si hay token -> Saltar a preguntas
        console.log("Usuario ya logueado en Spotify, iniciando cuestionario.");
        startQuestionnaire(); // Va directo a las preguntas

        // Asegurarse de que el reproductor web est√© visible y listo
        const playerElement = document.getElementById('spotify-web-player');
        if (playerElement) {
             playerElement.style.display = 'flex'; // Mostrarlo (como flexbox)
             
             // Intentar obtener el token y configurar el player (si a√∫n no est√° listo)
             // Esto es √∫til si la p√°gina se recarga mientras est√° logueado
             if (!currentPlayer) {
                 console.log("Intentando obtener token para player existente...");
                 fetch('/api/token')
                     .then(res => res.ok ? res.json() : Promise.reject('No token disponible desde /api/token'))
                     .then(data => data.access_token ? initializeWebPlaybackSDK(data.access_token) : null)
                     .catch(err => {
                         console.error("Error al obtener token para player existente:", err);
                         // Podr√≠amos forzar logout si el token falla
                         // window.location.href = '/logout';
                     });
             }
        }
    } else {
        // Si no hay token -> Mostrar pantalla de login/m√∫sica
        console.log("Usuario no logueado en Spotify, mostrando pantalla de selecci√≥n.");
        showScreen('musicSelectionScreen');
         // Asegurarse de que el reproductor est√© oculto
        const playerElement = document.getElementById('spotify-web-player');
        if (playerElement) playerElement.style.display = 'none';
    }

    updateTotalSteps(); // Actualiza el total de pasos en la UI una vez al inicio
}

// Actualiza el n√∫mero total de pasos en la barra de progreso
function updateTotalSteps() {
     const totalStepsEl = document.getElementById('totalSteps');
     if (totalStepsEl) {
         totalStepsEl.textContent = questions.length;
     }
}


// ==========================================
// NAVEGACI√ìN Y CUESTIONARIO (Pel√≠cula Mental)
// ==========================================
function showScreen(screenId) {
    // Busca la pantalla activa actual
    const activeScreen = document.querySelector('.screen.active');
    // Busca la nueva pantalla a mostrar
    const newScreen = document.getElementById(screenId);

    // Si la nueva pantalla no existe, no hacer nada y loguear error
    if (!newScreen) {
        console.error("Error cr√≠tico: No se encontr√≥ la pantalla con ID:", screenId);
        return;
    }

    // Si hay una pantalla activa y es diferente a la nueva
    if (activeScreen && activeScreen !== newScreen) {
        console.log(`Transicionando de ${activeScreen.id} a ${newScreen.id}`);
        // A√±adir clase para animaci√≥n de salida
        activeScreen.classList.add('hiding');

        // Funci√≥n para manejar el fin de la animaci√≥n/transici√≥n
        const handleTransitionEnd = (event) => {
            // Asegurarse que el evento viene del elemento correcto y es de opacidad o transformaci√≥n
            if (event.target === activeScreen && (event.propertyName === 'opacity' || event.propertyName === 'transform')) {
                activeScreen.classList.remove('active', 'hiding'); // Ocultar completamente
                newScreen.classList.add('active'); // Mostrar la nueva pantalla
                console.log(`Pantalla ${newScreen.id} activada.`);
                activeScreen.removeEventListener('transitionend', handleTransitionEnd); // Limpiar listener
                activeScreen.removeEventListener('animationend', handleTransitionEnd); // Limpiar listener alternativo
            }
        };

        // Escuchar por el final de la transici√≥n o animaci√≥n
        activeScreen.addEventListener('transitionend', handleTransitionEnd);
        activeScreen.addEventListener('animationend', handleTransitionEnd); // Por si acaso usa animaci√≥n

        // Fallback por si el evento no se dispara (raro pero posible)
        setTimeout(() => {
             if (activeScreen.classList.contains('hiding')) {
                 console.warn("Fallback: Forzando cambio de pantalla tras timeout.");
                 activeScreen.classList.remove('active', 'hiding');
                 newScreen.classList.add('active');
                 activeScreen.removeEventListener('transitionend', handleTransitionEnd);
                 activeScreen.removeEventListener('animationend', handleTransitionEnd);
             }
        }, 800); // Un poco m√°s que la duraci√≥n de la animaci√≥n

    } else if (!activeScreen) {
        // Si no hab√≠a pantalla activa, mostrar la nueva directamente
        console.log(`Activando pantalla inicial ${newScreen.id}`);
        newScreen.classList.add('active');
    }
    // Si activeScreen es igual a newScreen, no hacer nada (ya est√° visible)
}


function startQuestionnaireWithoutMusic() {
    console.log("Iniciando cuestionario sin m√∫sica.");
    startQuestionnaire();
}
// Hacer global para que el HTML la encuentre
window.startQuestionnaireWithoutMusic = startQuestionnaireWithoutMusic;

function startQuestionnaire() {
    console.log("Mostrando pantalla de cuestionario...");
    showScreen('questionnaireScreen'); // Transiciona a la pantalla de preguntas
    const progressBar = document.getElementById('progressBar');
    if(progressBar) progressBar.classList.remove('hidden'); // Muestra la barra de progreso
    
    currentQuestionIndex = 0; // Reinicia el √≠ndice a la primera pregunta
    // Inicializa userAnswers como un array del tama√±o correcto, lleno de null
    userAnswers = new Array(questions.length).fill(null); 
    displayQuestion(); // Muestra la primera pregunta
}
// Hacer global para que el HTML la encuentre
window.startQuestionnaire = startQuestionnaire;


function displayQuestion() {
    // Validaciones robustas al inicio
    if (!Array.isArray(questions) || questions.length === 0) {
        console.error("Error: El array 'questions' est√° vac√≠o o no es un array.");
        // Considerar mostrar un mensaje de error al usuario
        return;
    }
    if (currentQuestionIndex < 0 || currentQuestionIndex >= questions.length) {
        console.error("Error: 'currentQuestionIndex' fuera de rango:", currentQuestionIndex);
        // Podr√≠a ser que se haya completado, intentar generar pel√≠cula
        // generateMovie(); 
        return;
    }
    
    const question = questions[currentQuestionIndex];
    if (!question) {
        console.error("Error: No se encontr√≥ objeto de pregunta v√°lido en el √≠ndice:", currentQuestionIndex);
        return;
    }

    // Obtener elementos de la UI (usando '?' para acceso seguro)
    const answerInput = document.getElementById('answerInput');
    const questionImage = document.getElementById('questionImage');
    const categoryEl = document.getElementById('questionCategory');
    const titleEl = document.getElementById('questionTitle');
    const helperEl = document.getElementById('helperText');

    // Actualizar textos (con valores por defecto)
    if (categoryEl) categoryEl.textContent = question.category || 'Categor√≠a';
    if (titleEl) titleEl.textContent = question.question || 'Pregunta no disponible';
    if (helperEl) helperEl.textContent = question.helper || 'Piensa en tu respuesta.';

    // Rellenar respuesta anterior si existe
    if (answerInput) {
        // Busca la respuesta guardada para este √≠ndice
        const storedAnswerData = userAnswers[currentQuestionIndex];
        answerInput.value = storedAnswerData ? storedAnswerData.answer : ''; // Usa la respuesta guardada o vac√≠o
        answerInput.classList.remove('error'); // Limpiar errores visuales previos
    }

    // Actualizar imagen (con validaci√≥n de imageUrls)
    if (questionImage && Array.isArray(question.imageUrls) && question.imageUrls.length > 0) {
        questionImage.style.opacity = '0'; // Inicia transici√≥n fade-out
        setTimeout(() => {
            try {
                // Seleccionar imagen aleatoria
                const randomIndex = Math.floor(Math.random() * question.imageUrls.length);
                const newImageUrl = question.imageUrls[randomIndex];
                
                // Handlers para carga y error
                questionImage.onload = () => { questionImage.style.opacity = '1'; }; // Transici√≥n fade-in al cargar
                questionImage.onerror = () => {
                    console.warn(`Error cargando imagen ${newImageUrl}, usando fallback.`);
                    questionImage.src = fallbackImages[0]; // Usar primer fallback
                    questionImage.style.opacity = '1';
                };
                questionImage.src = newImageUrl; // Establecer la nueva imagen
            } catch (e) {
                console.error("Error al seleccionar o cargar imagen:", e);
                questionImage.src = fallbackImages[0]; // Fallback en caso de error inesperado
                questionImage.style.opacity = '1';
            }
        }, 300); // Tiempo para fade-out antes de cambiar src
    } else if (questionImage) {
        // Si no hay array de im√°genes o est√° vac√≠o, usar un fallback
        console.warn("No hay im√°genes para la pregunta actual, usando fallback.");
        questionImage.src = fallbackImages[0];
        questionImage.style.opacity = '1';
    }

    updateProgress(); // Actualizar barra de progreso
    updateButtons(); // Actualizar estado de botones
    answerInput?.focus(); // Poner foco en el input si existe
}


function updateProgress() {
    const progressFill = document.getElementById('progressFill');
    const currentStepEl = document.getElementById('currentStep');
    // Asegurarse de que los elementos existan y questions tenga longitud
    if (progressFill && currentStepEl && questions && questions.length > 0) {
        const progress = ((currentQuestionIndex + 1) / questions.length) * 100;
        // Limitar progreso a 100%
        progressFill.style.width = `${Math.min(progress, 100)}%`; 
        currentStepEl.textContent = currentQuestionIndex + 1;
    } else if (questions && questions.length === 0) {
        // Caso borde: si no hay preguntas
         if (progressFill) progressFill.style.width = `0%`;
         if (currentStepEl) currentStepEl.textContent = 0;
    }
}


function updateButtons() {
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    // Habilitar/deshabilitar bot√≥n Anterior
    if (prevBtn) {
        prevBtn.disabled = (currentQuestionIndex === 0);
    }
    
    // Cambiar texto y estado del bot√≥n Siguiente/Finalizar
    if (nextBtn) {
        nextBtn.textContent = (currentQuestionIndex === questions.length - 1) 
                                ? 'Crear mi Pel√≠cula üé¨' 
                                : 'Siguiente ‚Üí';
        // Podr√≠as a√±adir l√≥gica para deshabilitarlo si la respuesta es inv√°lida
        // const answerInput = document.getElementById('answerInput');
        // nextBtn.disabled = answerInput ? answerInput.value.trim().length < 10 : true;
    }
}


function nextQuestion() {
    const answerInput = document.getElementById('answerInput');
    if (!answerInput) {
        console.error("No se encontr√≥ el input de respuesta.");
        return;
    }

    const answer = answerInput.value.trim();
    const minLength = 10; // Longitud m√≠nima requerida

    // Validaci√≥n de longitud
    if (answer.length < minLength) {
        answerInput.classList.add('error'); // Resaltar error
        const helper = document.getElementById('helperText');
        const originalHelperText = questions[currentQuestionIndex]?.helper || 'Piensa en tu respuesta.';
        
        // Mostrar mensaje de error temporalmente
        if (helper) {
            helper.textContent = `Respuesta muy corta (m√≠n. ${minLength} caracteres).`;
            helper.style.color = 'var(--error-color)';
            helper.style.fontWeight = 'bold';
        }
        
        // Quitar el error despu√©s de un tiempo
        setTimeout(() => {
            answerInput.classList.remove('error');
            if (helper) {
                helper.textContent = originalHelperText; // Restaurar texto original
                helper.style.color = 'var(--text-muted)'; // Restaurar color
                helper.style.fontWeight = 'normal';
            }
        }, 2000); // 2 segundos para ver el mensaje
        return; // Detener la funci√≥n aqu√≠
    }

    // Guardar la respuesta (asegur√°ndose que la pregunta existe)
    if (questions[currentQuestionIndex]) {
        userAnswers[currentQuestionIndex] = {
            question: questions[currentQuestionIndex].question,
            answer: answer
        };
        console.log(`Respuesta ${currentQuestionIndex + 1} guardada:`, answer);
    } else {
        console.error("Intentando guardar respuesta para una pregunta inexistente:", currentQuestionIndex);
    }

    // Avanzar a la siguiente pregunta o generar la pel√≠cula
    if (currentQuestionIndex < questions.length - 1) {
        currentQuestionIndex++;
        displayQuestion(); // Mostrar la siguiente pregunta
    } else {
        console.log("Cuestionario completado. Iniciando generaci√≥n...");
        generateMovie(); // Generar la pel√≠cula si es la √∫ltima pregunta
    }
}
// Hacer global para el bot√≥n HTML
window.nextQuestion = nextQuestion;


function previousQuestion() {
    if (currentQuestionIndex > 0) {
        // Opcional: Guardar la respuesta actual antes de retroceder
        // const answerInput = document.getElementById('answerInput');
        // if (answerInput && questions[currentQuestionIndex]) {
        //     userAnswers[currentQuestionIndex] = {
        //         question: questions[currentQuestionIndex].question,
        //         answer: answerInput.value.trim()
        //     };
        // }
        currentQuestionIndex--; // Retroceder √≠ndice
        displayQuestion(); // Mostrar pregunta anterior
    }
}
// Hacer global para el bot√≥n HTML
window.previousQuestion = previousQuestion;


// ==========================================
// GENERACI√ìN DE IM√ÅGENES Y TEXTO (IA)
// ==========================================
async function generateMovie() {
    console.log("Iniciando generaci√≥n de pel√≠cula...");
    showScreen('generationScreen'); // Mostrar pantalla de carga
    const statusElement = document.getElementById('generationStatus');
    const generatedImages = [];

    // Ocultar elementos de resultado mientras se genera
    document.getElementById('revealContainer')?.classList.add('hidden');
    document.getElementById('resultCarousel')?.classList.add('hidden');
    document.getElementById('finalLayout')?.classList.add('hidden');

    // Bucle para generar cada imagen
    for (let i = 0; i < questions.length; i++) {
        if (statusElement) statusElement.textContent = `Generando escena ${i + 1} de ${questions.length}...`;

        const userAnswer = userAnswers[i]?.answer; // Respuesta guardada
        let prompt = "";
        const sceneTitle = questions[i]?.sceneTitle || `Escena ${i+1}`; // T√≠tulo de fallback
        const basePrompt = `Una imagen evocadora y visualmente impactante que represente: "${userAnswer || sceneTitle}".`;
        const style = "Estilo cinematogr√°fico hiperrealista, iluminaci√≥n dram√°tica, colores vibrantes, alta definici√≥n."; // Estilo detallado

        // L√≥gica de prompts espec√≠ficos (ejemplos)
        if (userAnswer) {
            const lowerAnswer = userAnswer.toLowerCase();
            if (lowerAnswer.includes('programaci√≥n') || lowerAnswer.includes('c√≥digo') || lowerAnswer.includes('software')) {
                prompt = `Primer plano de manos tecleando en un teclado iluminado con c√≥digo abstracto brillante reflejado en gafas o pantalla. ${style}`;
            } else if (lowerAnswer.includes('familia') || lowerAnswer.includes('amigos') || lowerAnswer.includes('apoyo')) {
                prompt = `Un grupo diverso de manos entrelazadas formando un c√≠rculo de unidad, con una luz c√°lida emanando del centro. ${style}`;
            } else if (lowerAnswer.includes('meta') || lowerAnswer.includes('logro') || lowerAnswer.includes('√©xito')) {
                prompt = `Silueta de una persona alcanzando la cima de una monta√±a al amanecer, con rayos de sol atravesando las nubes. ${style}`;
            } else if (lowerAnswer.includes('estudiar') || lowerAnswer.includes('aprender') || lowerAnswer.includes('libro')) {
                 prompt = `Un libro antiguo abierto sobre un escritorio de madera iluminado por la luz de una vela, con s√≠mbolos m√°gicos flotando de las p√°ginas. ${style}`;
            } else {
                prompt = `${basePrompt} ${style}`; // Prompt gen√©rico si no hay coincidencia
            }
        } else {
             // Prompt si no hubo respuesta
             prompt = `Imagen conceptual art√≠stica y abstracta sobre "${sceneTitle}". ${style}`;
        }
        console.log(`[Img ${i+1}] Prompt: ${prompt}`);

        // Llamada a la API para generar imagen
        try {
            const response = await fetch('/api/generate-image', {
                method: 'POST', headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt: prompt }),
            });

            // Manejo de errores de red o del servidor
            if (!response.ok) {
                 const errorData = await response.json().catch(() => ({ error: `HTTP error ${response.status}` }));
                 throw new Error(errorData.error || `HTTP error ${response.status}`);
            }

            const result = await response.json();
            // Validar que la respuesta contenga la URL de la imagen
            if (!result || !result.imageUrl) {
                 throw new Error("Respuesta inv√°lida de la API (falta imageUrl).");
            }

            generatedImages.push(result.imageUrl); // Guardar imagen generada
            console.log(`[Img ${i+1}] Imagen generada OK.`);

        } catch (error) {
            console.error(`[Img ${i+1}] Error al generar: ${error.message}`);
            // Usar una imagen de fallback si falla la generaci√≥n
            const fallbackIndex = i % fallbackImages.length; // Ciclar por las im√°genes de fallback
            generatedImages.push(fallbackImages[fallbackIndex]);
            console.log(`[Img ${i+1}] Usando fallback: ${fallbackImages[fallbackIndex]}`);
        }
    } // Fin del bucle for

    console.log("Generaci√≥n de todas las im√°genes completada.");
    createCarousel(generatedImages); // Crear el carrusel con las im√°genes
    showScreen('resultScreen'); // Cambiar a la pantalla de resultados
    // Mostrar el bot√≥n de revelar AHORA que las im√°genes est√°n listas
    const revealContainer = document.getElementById('revealContainer');
    if(revealContainer) revealContainer.classList.remove('hidden');

} // Fin de generateMovie


// ==========================================
// CARRUSEL Y RESULTADOS FINALES
// ==========================================
function createCarousel(generatedImages) {
    const slidesContainer = document.querySelector('.carousel-slides');
    const prevBtn = document.querySelector('.carousel-btn.prev');
    const nextBtn = document.querySelector('.carousel-btn.next');

    // Validar que el contenedor exista
    if (!slidesContainer) {
        console.error("Error: No se encontr√≥ el contenedor '.carousel-slides'.");
        return;
    }

    slidesContainer.innerHTML = ''; // Limpiar contenido previo
    currentSlide = 0; // Reiniciar √≠ndice

    // Manejar caso sin im√°genes
    if (!generatedImages || generatedImages.length === 0) {
        slidesContainer.innerHTML = '<p style="color: white; text-align: center; padding: 50px; font-style: italic;">No se pudieron generar las escenas.</p>';
        // Ocultar botones si no hay slides
        if (prevBtn) prevBtn.classList.add('hidden');
        if (nextBtn) nextBtn.classList.add('hidden');
        return;
    }

    // Crear cada slide
    generatedImages.forEach((imageUrl, index) => {
        const slide = document.createElement('div');
        slide.className = 'carousel-slide';

        // Obtener mensaje inspirador (asegurando √≠ndice v√°lido)
        const msgIndex = index % inspirationalMessages.length;
        const inspirationalText = inspirationalMessages[msgIndex];

        // Crear contenido del slide
        slide.innerHTML = `
            <div class="scene-card">
                <img src="${imageUrl}" alt="Escena ${index + 1} de la pel√≠cula mental" class="scene-image" loading="lazy">
                <p>${escapeHtml(inspirationalText)}</p>
            </div>
        `;
        slidesContainer.appendChild(slide);
    });

    // Mostrar/ocultar botones de navegaci√≥n seg√∫n n√∫mero de slides
    if (generatedImages.length > 1) {
        if (prevBtn) prevBtn.classList.remove('hidden');
        if (nextBtn) nextBtn.classList.remove('hidden');
    } else {
         if (prevBtn) prevBtn.classList.add('hidden');
         if (nextBtn) nextBtn.classList.add('hidden');
    }

    // Mostrar la primera diapositiva inmediatamente
    showSlide(0);
}


function revealCarousel() {
    const revealContainer = document.getElementById('revealContainer');
    const carousel = document.getElementById('resultCarousel');
    
    if (revealContainer) revealContainer.classList.add('hidden'); // Ocultar bot√≥n
    
    if (carousel) {
        carousel.classList.remove('hidden'); // Mostrar carrusel
        // Forzar reflow para que la animaci√≥n funcione al quitar 'hidden'
        void carousel.offsetWidth; 
        carousel.style.animation = 'fadeIn 0.6s ease-out'; // Aplicar animaci√≥n
    }
    
    startAutoplay(); // Iniciar autoplay al revelar
}
// Hacer global para el bot√≥n HTML
window.revealCarousel = revealCarousel;


async function startAutoplay() {
    // Detener cualquier autoplay anterior
    if (autoplayInterval) clearInterval(autoplayInterval);

    // Asegurarse de empezar desde la primera slide
    showSlide(0);
    console.log("Iniciando autoplay del carrusel...");

    autoplayInterval = setInterval(async () => {
        const slidesContainer = document.querySelector('.carousel-slides');
        const totalSlides = slidesContainer ? slidesContainer.children.length : 0;

        // Si no hay slides (error?), detener intervalo
        if (totalSlides === 0) {
             console.warn("Autoplay detenido: no hay slides en el carrusel.");
             clearInterval(autoplayInterval);
             // Podr√≠as mostrar el layout final aqu√≠ tambi√©n como fallback
             showFinalLayout();
             return;
        }

        // Si estamos en la √∫ltima slide
        if (currentSlide >= totalSlides - 1) {
            clearInterval(autoplayInterval); // Detener el intervalo
            console.log("Autoplay finalizado. Mostrando layout final.");
            // Ocultar carrusel y mostrar secci√≥n final
            const carousel = document.getElementById('resultCarousel');
            if(carousel) carousel.classList.add('hidden');
            showFinalLayout(); // Funci√≥n separada para mostrar el final
        } else {
            // Avanzar a la siguiente slide
            nextSlide();
        }
    }, 5000); // Cambiar slide cada 5 segundos
}
// Hacer global para control externo si es necesario
window.startAutoplay = startAutoplay;

// Funci√≥n para mostrar el layout final (Timeline + Frase + Botones)
async function showFinalLayout() {
     console.log("Construyendo timeline y generando frase...");
     buildTimeline(); // Construir el gui√≥n con las respuestas
     await fetchMotivationalPhrase(); // Esperar a que la IA genere la frase
     
     const finalLayout = document.getElementById('finalLayout');
     if (finalLayout) {
         finalLayout.classList.remove('hidden'); // Mostrar secci√≥n final
         // Forzar reflow para animaci√≥n
         void finalLayout.offsetWidth;
         finalLayout.style.animation = 'fadeIn 0.8s ease-out';
         console.log("Layout final mostrado.");
     } else {
         console.error("Error: No se encontr√≥ el elemento 'finalLayout'.");
     }
}


function showSlide(index) {
    const slidesContainer = document.querySelector('.carousel-slides');
    const allSlides = document.querySelectorAll('.carousel-slide');
    const prevBtn = document.querySelector('.carousel-btn.prev');
    const nextBtn = document.querySelector('.carousel-btn.next');

    // Validar elementos
    if (!slidesContainer || allSlides.length === 0) {
        // console.warn("showSlide: No hay slides para mostrar.");
        return;
    }
    const totalSlides = allSlides.length;

    // Ajustar √≠ndice si est√° fuera de rango
    if (index >= totalSlides) index = totalSlides - 1;
    if (index < 0) index = 0;
    currentSlide = index; // Actualizar √≠ndice global

    // Actualizar clase 'active-slide' para efectos visuales (e.g., opacidad)
    allSlides.forEach((slide, idx) => {
        slide.classList.toggle('active-slide', idx === currentSlide);
    });

    // Mover el contenedor usando transform para el efecto de deslizamiento
    slidesContainer.style.transform = `translateX(-${currentSlide * 100}%)`;

    // Actualizar estado de los botones de navegaci√≥n
    if (prevBtn) prevBtn.disabled = (currentSlide === 0);
    if (nextBtn) nextBtn.disabled = (currentSlide === totalSlides - 1);
}

// Funciones globales para los botones HTML
function nextSlide() { showSlide(currentSlide + 1); } window.nextSlide = nextSlide;
function prevSlide() { showSlide(currentSlide - 1); } window.prevSlide = prevSlide;


function buildTimeline() {
    const container = document.getElementById('textTimelineContainer');
    if (!container) {
        console.error("Error: Contenedor del timeline no encontrado.");
        return;
    }
    container.innerHTML = '<h2>Tu Gui√≥n de Vida</h2>'; // Limpiar y poner t√≠tulo

    // Iterar sobre las preguntas originales para asegurar el orden
    questions.forEach((q, index) => {
        // Obtener la respuesta guardada (puede ser null)
        const userAnswerData = userAnswers[index];
        const answerText = (userAnswerData && userAnswerData.answer) ? userAnswerData.answer : "No se proporcion√≥ respuesta."; // Mensaje claro si no hay respuesta

        // Crear elemento del timeline
        const item = document.createElement('div');
        item.className = 'timeline-item';
        item.innerHTML = `
            <strong>${escapeHtml(q.sceneTitle || `Escena ${index + 1}`)}: ${escapeHtml(q.question || '')}</strong>
            <span>${escapeHtml(answerText)}</span>
        `;
        container.appendChild(item);
    });
    console.log("Timeline construido.");
}


async function fetchMotivationalPhrase() {
    const phraseElement = document.getElementById('motivationalPhrase');
    if (!phraseElement) {
        console.error("Error: Elemento para frase motivacional no encontrado.");
        return;
    }
    phraseElement.textContent = "Generando inspiraci√≥n..."; // Mensaje de carga

    try {
        // Filtrar respuestas v√°lidas (no nulas y con longitud suficiente)
        const validAnswers = userAnswers.filter(a => a && a.answer && a.answer.trim().length >= 10);

        // Si no hay respuestas v√°lidas, usar una frase por defecto
        if (validAnswers.length === 0) {
            console.log("No hay respuestas v√°lidas para generar frase, usando default.");
            phraseElement.textContent = '"El viaje de mil millas comienza con un solo paso."';
            return;
        }

        // Llamar a la API de IA
        const response = await fetch('/api/generate-text', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ answers: validAnswers }) // Enviar solo las v√°lidas
        });

        // Manejar errores de la API
        if (!response.ok) {
            const errorData = await response.json().catch(()=> ({error:'Error desconocido del servidor'}));
            throw new Error(errorData.error || `Error ${response.status} al llamar a la API de texto`);
        }

        const data = await response.json();
        // Mostrar la frase generada o un fallback si viene vac√≠a
        const generatedText = data.generatedText;
        phraseElement.textContent = generatedText ? `"${generatedText}"` : '"Vive la vida que has imaginado."';
        console.log("Frase motivacional generada:", phraseElement.textContent);

    } catch (error) {
        console.error('Error al obtener frase de IA:', error.message);
        // Usar frase de respaldo gen√©rica en caso de cualquier error
        phraseElement.textContent = '"La mejor manera de predecir el futuro es crearlo."';
    }
}


// ==========================================
// OTRAS FUNCIONES (PDF, Reinicio)
// ==========================================
function escapeHtml(unsafe) {
    // Funci√≥n simple para escapar HTML y prevenir XSS b√°sico
    if (typeof unsafe !== 'string') return '';
    return unsafe
         .replace(/&/g, "&amp;")
         .replace(/</g, "&lt;")
         .replace(/>/g, "&gt;")
         .replace(/"/g, "&quot;")
         .replace(/'/g, "&#039;");
}


async function downloadPDF() {
    const downloadBtn = event.currentTarget; // Usar currentTarget para asegurar que es el bot√≥n
    if (!downloadBtn) return;
    
    downloadBtn.textContent = 'Generando PDF...';
    downloadBtn.disabled = true;

    const finalLayout = document.getElementById('finalLayout');
    if (!finalLayout) {
         alert("Error cr√≠tico: No se encontr√≥ el contenido (#finalLayout) para generar el PDF.");
         downloadBtn.textContent = 'Descargar PDF üì•';
         downloadBtn.disabled = false;
         return;
    }

    // Asegurarse de que el layout est√© visible para html2canvas
    const wasHidden = finalLayout.classList.contains('hidden');
    if (wasHidden) finalLayout.classList.remove('hidden');

    console.log("Iniciando generaci√≥n de PDF...");
    try {
        // Esperar brevemente para asegurar el renderizado completo
        await new Promise(resolve => setTimeout(resolve, 600));

        // Capturar el contenido con html2canvas
        const canvas = await html2canvas(finalLayout, {
            backgroundColor: '#0a0a0a', // Fondo oscuro consistente
            scale: window.devicePixelRatio || 1.5, // Usar escala del dispositivo o 1.5x
            useCORS: true, // Permitir im√°genes externas si las hubiera
            logging: false, // Desactivar logs de html2canvas en consola
            // Capturar desde la parte superior, ignorando scroll de la p√°gina
            scrollX: 0,
            scrollY: -window.scrollY,
            windowWidth: finalLayout.scrollWidth,
            windowHeight: finalLayout.scrollHeight
        });
        console.log("Canvas generado.");

        // Volver a ocultar el layout si estaba oculto originalmente
        if (wasHidden) finalLayout.classList.add('hidden');

        // Inicializar jsPDF
        const { jsPDF } = window.jspdf;
        // Configuraci√≥n para A4: 210mm x 297mm
        const pdf = new jsPDF({
            orientation: 'p',
            unit: 'mm',
            format: 'a4'
        });

        const imgProps = pdf.getImageProperties(canvas);
        const margin = 15; // Margen m√°s generoso
        const pdfWidth = pdf.internal.pageSize.getWidth() - 2 * margin;
        const pdfPageHeight = pdf.internal.pageSize.getHeight() - 2 * margin;
        // Calcular altura proporcional de la imagen en el PDF
        const imgHeight = (imgProps.height * pdfWidth) / imgProps.width;
        let heightLeft = imgHeight; // Altura restante por a√±adir
        let position = margin; // Posici√≥n Y inicial

        // A√±adir la primera (o √∫nica) parte de la imagen
        pdf.addImage(canvas.toDataURL('image/png', 0.95), // Calidad PNG alta
                     'PNG', margin, position, pdfWidth, imgHeight,
                     undefined, 'FAST'); // Compresi√≥n r√°pida
        heightLeft -= pdfPageHeight; // Restar la altura de la primera p√°gina

        // A√±adir p√°ginas adicionales si la imagen es m√°s alta que una p√°gina
        while (heightLeft > 0) {
            position = heightLeft - imgHeight + margin; // Calcular nueva posici√≥n Y negativa
            pdf.addPage();
            pdf.addImage(canvas.toDataURL('image/png', 0.95), 'PNG', margin, position, pdfWidth, imgHeight, undefined, 'FAST');
            heightLeft -= pdfPageHeight; // Restar altura de la p√°gina a√±adida
        }

        // Guardar el archivo PDF
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        pdf.save(`mi-pelicula-mental-${timestamp}.pdf`);
        console.log("PDF guardado.");
        alert('¬°Tu Pel√≠cula Mental ha sido guardada como PDF!');

    } catch (error) {
        console.error('Error detallado al generar PDF:', error);
        alert('Hubo un problema al generar el PDF. Por favor, revisa la consola (F12) para m√°s detalles t√©cnicos.');
        // Asegurarse de ocultar si hubo error
        if (wasHidden) finalLayout.classList.add('hidden');
    } finally {
        // Restaurar estado del bot√≥n
        downloadBtn.textContent = 'Descargar PDF üì•';
        downloadBtn.disabled = false;
    }
}
// Hacer global para el bot√≥n HTML
window.downloadPDF = downloadPDF;


function restartJourney() {
    if (confirm('¬øEst√°s seguro de querer empezar de nuevo? Se borrar√°n tus respuestas actuales.')) {
        console.log("Reiniciando el cuestionario...");
        userAnswers = []; // Borrar respuestas
        currentQuestionIndex = 0; // Resetear √≠ndice
        if (autoplayInterval) clearInterval(autoplayInterval); // Detener carrusel

        // Ocultar todas las pantallas y luego mostrar la inicial correcta
        document.querySelectorAll('.screen').forEach(s => {
             s.classList.remove('active', 'hiding');
             s.style.animation = 'none'; // Prevenir animaciones residuales
        });

        // Decidir qu√© pantalla mostrar basado en el login de Spotify
        if (window.isSpotifyLoggedIn === true) {
             console.log("Usuario logueado, reiniciando a preguntas.");
             startQuestionnaire(); // Ir directo a las preguntas
        } else {
             console.log("Usuario no logueado, reiniciando a pantalla de login.");
             showScreen('musicSelectionScreen'); // Ir a la pantalla de login/m√∫sica
        }

        // Asegurarse de ocultar elementos de UI de resultados
        document.getElementById('progressBar')?.classList.add('hidden');
        document.getElementById('revealContainer')?.classList.add('hidden');
        document.getElementById('resultCarousel')?.classList.add('hidden');
        document.getElementById('finalLayout')?.classList.add('hidden');

        // Opcional: Pausar Spotify
        currentPlayer?.pause().catch(console.error);
        console.log("Reinicio completado.");
    }
}
// Hacer global para el bot√≥n HTML
window.restartJourney = restartJourney;


// ==========================================
// L√ìGICA DE SPOTIFY WEB PLAYBACK SDK
// ==========================================
async function initializeSpotifyConnection() {
    return new Promise((resolve) => {
        // Si el SDK ya est√° cargado y listo
        if (window.Spotify && typeof window.Spotify.Player === 'function') {
            console.log("SDK de Spotify ya disponible.");
            handleSdkReady().then(resolve); // Llama al handler y resuelve cuando termine
            return;
        }

        // Si no, asignar el callback global
        window.onSpotifyWebPlaybackSDKReady = () => {
            console.log("Spotify SDK listo (callback disparado).");
            handleSdkReady().then(resolve); // Llama al handler y resuelve cuando termine
        };

        // Fallback por si el SDK no carga
        setTimeout(() => {
            // Verificar de nuevo si Spotify se carg√≥ en este tiempo
            if (!window.Spotify || typeof window.Spotify.Player !== 'function') {
                console.error("Fallo cr√≠tico: El SDK de Spotify no se carg√≥ despu√©s de 7 segundos.");
                // Ocultar player permanentemente si el SDK falla
                const playerElement = document.getElementById('spotify-web-player');
                if (playerElement) playerElement.style.display = 'none';
                // Indicar al usuario (opcional)
                // alert("No se pudo conectar con Spotify. Intenta recargar la p√°gina.");
                resolve(); // Resuelve para no bloquear la app
            }
        }, 7000); // Aumentar timeout a 7 segundos
    });
}

async function handleSdkReady() {
    // Se llama cuando el SDK est√° listo (ya sea al cargar o si ya estaba)
    console.log("Manejando SDK listo...");
    // Verificar si estamos logueados seg√∫n la variable de Flask
    if (window.isSpotifyLoggedIn === true) {
        console.log("Usuario logueado, obteniendo token para SDK...");
        try {
            const response = await fetch('/api/token'); // Pedir el token real
            if (!response.ok) {
                 const errorData = await response.json().catch(() => ({error: `Error ${response.status}`}));
                 throw new Error(errorData.error || `Error ${response.status} al obtener token`);
            }
            const data = await response.json();
            if (data && data.access_token) {
                initializeWebPlaybackSDK(data.access_token); // Inicializar el player
            } else {
                console.warn('No se recibi√≥ token de acceso v√°lido desde /api/token.');
                hidePlayer(); // Ocultar si no hay token
            }
        } catch (error) {
            console.error("Error al obtener token para inicializar SDK:", error.message);
            hidePlayer(); // Ocultar si hay error
            // Considerar forzar logout si el token falla consistentemente
            // window.location.href = '/logout';
        }
    } else {
        console.log("SDK listo, pero usuario no logueado.");
        hidePlayer(); // Asegurarse de ocultar si no est√° logueado
    }
}

function hidePlayer() {
     const playerElement = document.getElementById('spotify-web-player');
     if (playerElement) playerElement.style.display = 'none';
}


function initializeWebPlaybackSDK(accessToken) {
    if (!accessToken) {
        console.error("Error cr√≠tico: Intento de inicializar SDK sin accessToken.");
        return;
    }
    // Evitar reinicializar si ya existe una instancia
    if (currentPlayer) {
        console.log("El reproductor Spotify ya est√° inicializado.");
        // Podr√≠amos verificar si el token es diferente y actualizarlo,
        // pero por ahora, simplemente retornamos.
        // currentPlayer.getOAuthToken(t => { if (t !== accessToken) { /* L√≥gica de update? */ }});
        return;
    }

    console.log("Inicializando instancia de Spotify.Player...");
    try {
        currentPlayer = new Spotify.Player({
            name: 'Mi Pel√≠cula Mental Player', // Nombre que aparecer√° en Spotify Connect
            getOAuthToken: cb => {
                // El SDK llama a esto cuando necesita un token (inicialmente y para refrescar?)
                console.log("SDK solicita token...");
                // Idealmente, aqu√≠ deber√≠amos llamar a /api/token para obtener el m√°s reciente
                // fetch('/api/token').then(r=>r.json()).then(d=>cb(d.access_token)).catch(e => { console.error("Fallo al refrescar token para SDK", e); cb(accessToken);});
                // Por simplicidad ahora, solo devolvemos el token inicial.
                // ¬°OJO! Esto puede fallar si el token expira y no tenemos l√≥gica de refresh aqu√≠.
                 fetch('/api/token')
                    .then(response => {
                        if (!response.ok) throw new Error('No se pudo refrescar token para SDK');
                        return response.json();
                    })
                    .then(data => {
                        if (data.access_token) {
                             console.log("Token refrescado para SDK proporcionado.");
                             cb(data.access_token);
                             accessToken = data.access_token; // Actualizar token localmente?
                        } else {
                             throw new Error('Respuesta de /api/token inv√°lida durante getOAuthToken');
                        }
                    })
                    .catch(error => {
                        console.error("Error cr√≠tico al obtener token para SDK:", error.message);
                        // Si falla el refresh, el player se desconectar√°. Forzar logout?
                        // window.location.href = '/logout';
                        cb(null); // Indicar fallo al SDK
                    });
            },
            volume: 0.6 // Volumen inicial (0 a 1)
        });
    } catch (e) {
        console.error("Error al crear la instancia de Spotify.Player:", e);
        alert("No se pudo inicializar el reproductor de Spotify. Aseg√∫rate de estar usando un navegador compatible.");
        return;
    }


    // --- Listeners del Reproductor ---
    currentPlayer.addListener('ready', ({ device_id }) => {
        console.log('Reproductor LISTO y conectado con Device ID:', device_id);
        currentDeviceId = device_id;
        const playerElement = document.getElementById('spotify-web-player');
        if (playerElement) playerElement.style.display = 'flex'; // Mostrar player
        console.log("Intentando transferir playback al conectar...");
        transferPlayback(device_id); // Intentar transferir control
    });

    currentPlayer.addListener('not_ready', ({ device_id }) => {
        console.log('Reproductor NO LISTO. Device ID:', device_id, 'se desconect√≥.');
        hidePlayer(); // Ocultar el reproductor
        currentDeviceId = null;
    });

    currentPlayer.addListener('player_state_changed', (state) => {
        // Este es el listener m√°s importante, actualiza la UI
        if (!state) {
             console.warn("Estado del reproductor nulo recibido. Posible desconexi√≥n o error.");
             // Resetear UI a estado 'desconectado' o placeholder
             updatePlayerUI(null);
             return;
        }
        console.debug("Nuevo estado del reproductor:", state);
        updatePlayerUI(state); // Llamar a funci√≥n separada para actualizar UI
    });

    // --- Listeners de Errores Detallados ---
    currentPlayer.addListener('initialization_error', ({ message }) => { console.error('Error de INICIALIZACI√ìN SDK:', message); showPlayerError(message); hidePlayer(); });
    currentPlayer.addListener('authentication_error', ({ message }) => { console.error('Error de AUTENTICACI√ìN SDK:', message); showPlayerError(message + " Sesi√≥n inv√°lida."); hidePlayer(); window.location.href = '/logout'; }); // Forzar logout
    currentPlayer.addListener('account_error', ({ message }) => { console.error('Error de CUENTA SDK:', message); showPlayerError(message + " Se requiere Spotify Premium."); hidePlayer(); }); // Premium requerido
    currentPlayer.addListener('playback_error', ({ message }) => { console.error('Error de REPRODUCCI√ìN SDK:', message); showPlayerError("Error al reproducir: " + message); });


    // --- Conectar el Reproductor ---
    console.log("Conectando el reproductor del SDK...");
    currentPlayer.connect().then(success => {
        if (success) {
            console.log('SDK de Spotify conectado al backend exitosamente.');
        } else {
            console.error('FALLO: El SDK de Spotify no pudo conectarse.');
            hidePlayer();
        }
    }).catch(error => {
         console.error("Error durante currentPlayer.connect():", error);
         hidePlayer();
    });

    // --- Configurar Botones de Control (una sola vez) ---
    setupPlayerControls();

} // Fin de initializeWebPlaybackSDK

// Funci√≥n separada para actualizar la UI del reproductor
function updatePlayerUI(state) {
    const trackNameEl = document.getElementById('spotify-track-name');
    const artistNameEl = document.getElementById('spotify-artist-name');
    const albumArtEl = document.getElementById('spotify-album-art');
    const playBtn = document.getElementById('spotify-play-btn');
    const pauseBtn = document.getElementById('spotify-pause-btn');
    const prevBtn = document.getElementById('spotify-prev-btn');
    const nextBtn = document.getElementById('spotify-next-btn');

    // Estado por defecto (sin canci√≥n o desconectado)
    let trackName = 'Spotify';
    let artistName = 'Web Player';
    let imageUrl = 'https://placehold.co/50x50/1c1c1c/333?text=+';
    let isPaused = true;
    let canSkipPrev = false;
    let canSkipNext = false;

    if (state) {
        const track = state.track_window?.current_track;
        if (track) {
            trackName = track.name || 'Canci√≥n Desconocida';
            artistName = track.artists?.map(a => a.name).join(', ') || 'Artista Desconocido';
            imageUrl = track.album?.images?.slice(-1)[0]?.url || imageUrl; // Imagen m√°s peque√±a
        }
        isPaused = state.paused;
        // Habilitar/deshabilitar botones seg√∫n el estado
        canSkipPrev = state.restrictions?.can_skip_prev === false ? false : true; // Habilitado por defecto
        canSkipNext = state.restrictions?.can_skip_next === false ? false : true; // Habilitado por defecto
    }

    // Actualizar elementos del DOM
    if (trackNameEl) trackNameEl.textContent = trackName;
    if (artistNameEl) artistNameEl.textContent = artistName;
    if (albumArtEl) albumArtEl.src = imageUrl;
    if (playBtn) playBtn.style.display = isPaused ? 'inline-block' : 'none';
    if (pauseBtn) pauseBtn.style.display = isPaused ? 'none' : 'inline-block';
    if (prevBtn) prevBtn.disabled = !canSkipPrev;
    if (nextBtn) nextBtn.disabled = !canSkipNext;
}


// Funci√≥n para configurar los listeners de los botones de control una sola vez
function setupPlayerControls() {
    const setupControl = (id, event, action) => {
        const btn = document.getElementById(id);
        // Verificar si el listener ya fue a√±adido antes de agregarlo
        if (btn && !btn.dataset.listenerAttached) {
            btn.addEventListener(event, (e) => {
                e.preventDefault(); // Prevenir comportamiento por defecto si es link/bot√≥n
                if (currentPlayer) { // Solo ejecutar si el player est√° listo
                    action(currentPlayer);
                } else {
                    console.warn(`Intento de usar control ${id} pero currentPlayer no est√° listo.`);
                }
            });
            btn.dataset.listenerAttached = 'true'; // Marcar como a√±adido
        }
    };

    // Asignar acciones a los botones
    setupControl('spotify-play-btn', 'click', (player) => player.resume().catch(e => console.error("Error al resumir:", e)));
    setupControl('spotify-pause-btn', 'click', (player) => player.pause().catch(e => console.error("Error al pausar:", e)));
    setupControl('spotify-prev-btn', 'click', (player) => player.previousTrack().catch(e => console.error("Error en previousTrack:", e)));
    setupControl('spotify-next-btn', 'click', (player) => player.nextTrack().catch(e => console.error("Error en nextTrack:", e)));

    console.log("Listeners de controles del reproductor configurados.");
}


// Funci√≥n para mostrar errores del player en la UI (opcional)
function showPlayerError(message) {
    console.error("PLAYER ERROR:", message);
    // Podr√≠as tener un div en el HTML para mostrar estos mensajes
    // const errorDiv = document.getElementById('spotify-error-message');
    // if (errorDiv) {
    //     errorDiv.textContent = message;
    //     errorDiv.style.display = 'block';
    //     setTimeout(() => errorDiv.style.display = 'none', 5000); // Ocultar despu√©s de 5s
    // }
}


async function transferPlayback(deviceId) {
    if (!deviceId) {
        console.warn("Intento de transferir playback sin deviceId v√°lido.");
        return;
    }
    console.log("Enviando petici√≥n a /api/transfer_playback para device ID:", deviceId);
    try {
        const response = await fetch('/api/transfer_playback', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ device_id: deviceId })
        });
        const data = await response.json(); // Intentar parsear JSON siempre

        if (response.ok && data.status === 'success') {
            console.log('Reproducci√≥n transferida exitosamente a este navegador.');
        } else {
            // Loguear error espec√≠fico devuelto por el backend o estado HTTP
            const errorMsg = data.error || `Error ${response.status} al transferir reproducci√≥n.`;
            console.warn('No se pudo transferir la reproducci√≥n:', errorMsg);
            // Podr√≠as mostrar un mensaje sutil al usuario si falla la transferencia
        }
    } catch (error) {
        // Error de red o al parsear JSON
        console.error('Error en fetch durante transferPlayback:', error);
    }
}


// ==================================================
// L√ìGICA DEL BUSCADOR INTEGRADO EN EL REPRODUCTOR
// ==================================================
function setupSpotifySearchListeners() {
    const player = document.getElementById('spotify-web-player');
    const expandBtn = document.getElementById('spotify-expand-btn');
    const searchSection = document.getElementById('spotify-search-expansion');
    const searchInput = document.getElementById('spotify-player-search-input');
    const searchResultsContainer = document.getElementById('spotify-player-search-results');

    // Validar que todos los elementos necesarios existan
    if (!player || !expandBtn || !searchSection || !searchInput || !searchResultsContainer) {
        console.error("Error: No se encontraron todos los elementos para el buscador del player.");
        return;
    }

    // 1. Bot√≥n para Expandir/Cerrar la secci√≥n de b√∫squeda
    expandBtn.addEventListener('click', () => {
        const isCurrentlyHidden = searchSection.classList.contains('hidden');
        searchSection.classList.toggle('hidden', !isCurrentlyHidden); // Muestra si estaba oculto, oculta si estaba visible
        player.classList.toggle('spotify-player-expanded', isCurrentlyHidden); // A√±ade clase si se va a mostrar
        expandBtn.textContent = isCurrentlyHidden ? '‚úñÔ∏è' : 'üîé'; // Cambia el √≠cono
        expandBtn.setAttribute('aria-expanded', isCurrentlyHidden ? 'true' : 'false'); // Accesibilidad

        if (isCurrentlyHidden) {
             searchInput.focus(); // Poner foco en el input al expandir
        } else {
             // Limpiar b√∫squeda al cerrar
             searchInput.value = '';
             searchResultsContainer.innerHTML = '<p>Escribe para buscar...</p>';
        }
    });

    // 2. Input de B√∫squeda (con debounce para eficiencia)
    let searchTimeout;
    searchInput.addEventListener('input', (event) => {
        clearTimeout(searchTimeout); // Cancelar timeout anterior
        const query = event.target.value.trim();

        // Actualizar UI de resultados inmediatamente
        if (query.length === 0) {
            searchResultsContainer.innerHTML = '<p>Escribe para buscar...</p>';
            return; // No buscar si est√° vac√≠o
        }
        if (query.length <= 2) {
            searchResultsContainer.innerHTML = '<p>Sigue escribiendo...</p>';
            return; // No buscar si es muy corto
        }

        // Mostrar 'Buscando...' mientras espera el debounce
        searchResultsContainer.innerHTML = '<p>Buscando...</p>';

        // Establecer nuevo timeout para buscar despu√©s de 350ms
        searchTimeout = setTimeout(() => {
            searchSpotifyInPlayer(query); // Llamar a la funci√≥n de b√∫squeda
        }, 350);
    });

    // 3. Listener de Clic en los Resultados de B√∫squeda (delegaci√≥n de eventos)
    searchResultsContainer.addEventListener('click', (event) => {
        // Encontrar el elemento 'search-result-item' m√°s cercano al clic
        const trackItem = event.target.closest('.search-result-item');
        if (trackItem) {
            const trackUri = trackItem.getAttribute('data-track-uri');
            if (trackUri) {
                console.log("Clic en resultado, intentando reproducir URI:", trackUri);
                playSpotifyTrack(trackUri); // Reproducir la canci√≥n

                // Cerrar el buscador despu√©s de seleccionar
                searchSection.classList.add('hidden');
                player.classList.remove('spotify-player-expanded');
                expandBtn.textContent = 'üîé';
                expandBtn.setAttribute('aria-expanded', 'false');
                searchInput.value = ''; // Limpiar input
                searchResultsContainer.innerHTML = '<p>Escribe para buscar...</p>'; // Resetear resultados
            } else {
                console.warn("El item de resultado no ten√≠a 'data-track-uri'.");
            }
        }
    });

    console.log("Listeners del buscador del reproductor configurados.");

} // Fin de setupSpotifySearchListeners


// 4. Funci√≥n para llamar a /api/search (Backend)
async function searchSpotifyInPlayer(query) {
    const searchResultsContainer = document.getElementById('spotify-player-search-results');
    if (!query || !searchResultsContainer) return;

    console.log("Buscando en Spotify (desde player):", query);
    // Mantener mensaje de "Buscando..."
    // searchResultsContainer.innerHTML = '<p>Buscando...</p>';

    try {
        const response = await fetch('/api/search', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ query: query })
        });

        // Manejo de errores de respuesta
        if (!response.ok) {
            const errorData = await response.json().catch(()=>({error:'Error desconocido'}));
            throw new Error(errorData.error || `Error ${response.status} en la b√∫squeda`);
        }

        const tracks = await response.json();
        renderSearchResultsInPlayer(tracks); // Renderizar resultados

    } catch (error) {
        console.error("Error en searchSpotifyInPlayer:", error);
        if (searchResultsContainer) {
             searchResultsContainer.innerHTML = `<p style="color: var(--error-color);">${error.message}</p>`;
        }
    }
}


// 5. Funci√≥n para Renderizar Resultados en el Contenedor del Player
function renderSearchResultsInPlayer(tracks) {
    const searchResultsContainer = document.getElementById('spotify-player-search-results');
    if (!searchResultsContainer) return;

    searchResultsContainer.innerHTML = ''; // Limpiar contenedor

    if (!Array.isArray(tracks) || tracks.length === 0) {
        searchResultsContainer.innerHTML = '<p>No se encontraron resultados.</p>';
        return;
    }

    // Crear y a√±adir cada item de resultado
    tracks.forEach(track => {
        // Extraer datos de forma segura
        const imageUrl = track.album?.images?.slice(-1)[0]?.url || 'https://placehold.co/40x40/1c1c1c/333?text=+';
        const trackName = track.name || 'T√≠tulo desconocido';
        const artistName = track.artists?.map(a => a.name).join(', ') || 'Artista desconocido';
        const trackUri = track.uri;

        // Saltar si no hay URI (improbable pero posible)
        if (!trackUri) return;

        // Crear elemento HTML
        const trackElement = document.createElement('div');
        trackElement.className = 'search-result-item';
        trackElement.setAttribute('data-track-uri', trackUri); // Guardar URI para reproducir
        trackElement.setAttribute('role', 'option'); // Accesibilidad
        trackElement.setAttribute('tabindex', '0'); // Hacer focusable
        trackElement.innerHTML = `
            <img src="${imageUrl}" alt="Car√°tula de ${escapeHtml(track.album?.name || '')}" loading="lazy">
            <div class="search-result-info">
                <strong>${escapeHtml(trackName)}</strong>
                <span>${escapeHtml(artistName)}</span>
            </div>
        `;
        // A√±adir listener de teclado para accesibilidad (opcional pero bueno)
        trackElement.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                playSpotifyTrack(trackUri);
                // Cerrar buscador
                 document.getElementById('spotify-search-expansion')?.classList.add('hidden');
                 document.getElementById('spotify-web-player')?.classList.remove('spotify-player-expanded');
                 document.getElementById('spotify-expand-btn').textContent = 'üîé';
            }
        });

        searchResultsContainer.appendChild(trackElement);
    });
    console.log(`Renderizados ${tracks.length} resultados.`);
}


// 6. Funci√≥n para llamar a /api/play (Backend) - ¬°Esta ya existe y es correcta!
async function playSpotifyTrack(trackUri) {
    if (!trackUri) {
        console.error("playSpotifyTrack: No se proporcion√≥ track URI.");
        return;
    }
    // Asegurarse de que el reproductor web est√© activo
    if (!currentDeviceId) {
         alert("El reproductor de Spotify no est√° listo. Intenta de nuevo en un momento.");
         console.warn("Intento de reproducir sin device ID activo.");
         // Podr√≠amos intentar forzar la transferencia aqu√≠, pero es mejor esperar al 'ready'
         // await transferPlayback(currentDeviceId); // Esto probablemente fallar√≠a
         return;
    }

    console.log("Enviando petici√≥n a /api/play con URI:", trackUri);
    try {
        const response = await fetch('/api/play', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ track_uri: trackUri }) // Enviar el URI correcto
        });
        const data = await response.json(); // Intentar parsear JSON siempre

        if (response.ok && data.status === 'success') {
            console.log('Petici√≥n de reproducci√≥n enviada exitosamente.');
            // No necesitamos hacer nada m√°s aqu√≠, el listener 'player_state_changed'
            // deber√≠a recibir el nuevo estado y actualizar la UI.
        } else {
             // Mostrar error espec√≠fico devuelto por el backend
             const errorMsg = data.error || `Error ${response.status} al intentar reproducir.`;
             throw new Error(errorMsg);
        }
    } catch (error) {
        console.error('Error en playSpotifyTrack (fetch):', error);
        // Mostrar error al usuario de forma m√°s clara
        alert(`Error al reproducir: ${error.message}\nAseg√∫rate de tener Spotify Premium y que el reproductor web est√© activo en este navegador.`);
    }
}
// Fin del archivo app.js